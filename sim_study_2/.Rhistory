for (i in 1:100) {
temp <- extractBic(out_FABIAS, thresZ = FABIAS_thresh[i])
B_temp <- matrix(0, nrow = G, ncol = K)
X_temp <- matrix(0, nrow = N, ncol = K)
for(k in 1:K_svd) {
B_temp[temp$numn[k,]$numng, k] <- 1
X_temp[temp$numn[k,]$numnp, k] <- 1
}
zeroes_B <- which(apply(B_temp, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_temp, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if(length(zeroes) > 0) {
B_temp <- as.matrix(B_temp[, -zeroes])
X_temp <- as.matrix(X_temp[, -zeroes])
}
FABIAS_consensus[i] <- analyze_bic(X_temp, B_temp, X, B)$consensus
X_FABIAS_thresh[[i]] <- X_temp
B_FABIAS_thresh[[i]] <- B_temp
}
FABIAS_truth <- which.max(FABIAS_consensus)
X_FABIAS_truth <- X_FABIAS_thresh[[FABIAS_truth]]
B_FABIAS_truth <- B_FABIAS_thresh[[FABIAS_truth]]
K_FABIAS_truth <- ncol(X_FABIAS_truth)
if (K_FABIAS_truth > 0) {
result_FABIAS_truth <- analyze_bic(X_FABIAS_truth, B_FABIAS_truth, X, B)
result["FABIAS_truth", "consensus", r] <- result_FABIAS_truth$consensus
result["FABIAS_truth", "recovery", r] <- result_FABIAS_truth$recovery
result["FABIAS_truth", "relevance", r] <- result_FABIAS_truth$relevance
result["FABIAS_truth", "K", r] <- K_FABIAS_truth
} else {
result["FABIAS_truth", "K", r] <- K_FABIAS_truth
}
}
print(r)
}
result_melt <- melt(result)
result_tibble <- as_tibble(result_melt)
dat <- spread(result_tibble, Var2, value)
# consensus
dat <- filter(dat, !(Var1 %in% c("FABIA_truth","Bicmix_truth", "FABIAS", "FABIAS_truth", "CCS")))
labels <- unique(dat$Var1)
labels <- as.character(labels)
labels[which(labels == "SSLB_PY")] <- "SSLB-PY"
labels[which(labels == "SSLB_IBP")] <- "SSLB-IBP"
labels[which(labels == "SSLB_BB")] <- "SSLB-BB"
labels[which(labels == "Bicmix")] <- "BicMix"
g <- ggplot(dat, aes(Var1, consensus))
g <- g + geom_boxplot(aes(fill = Var1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "", y = "Consensus")
g <- g + scale_x_discrete(labels = labels)
g <- g + theme(axis.text.x=element_text(color = "black", size=15, angle=0))
g <- g + theme(legend.position="none")
g <- g + theme(axis.ticks = element_blank())
g <- g + theme(text = element_text(size=20))
g
pdf(file = "figures/consensus.pdf", width = 6, height = 3.5, pointsize = 14)
g
dev.off()
# relevance and recovery
g <- ggplot(dat, aes(recovery, relevance))
g <- g + geom_point(aes(color = Var1, shape = Var1))
g <- g + scale_x_continuous(limits = c(0, 1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "Recovery", y = "Relevance")
g <- g + scale_color_discrete(labels = labels)
g <- g + scale_shape_discrete(labels = labels)
g <- g + theme(legend.title=element_blank())
g <- g + theme(text = element_text(size=20))
g
pdf(file = "figures/rr.pdf", width = 6, height = 3.5, pointsize = 14)
g
dev.off()
save(result, file = "results/sigma_1.RData")
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/sim_study_1")
load("sigma_1/results/sigma_1.RData")
result_melt <- melt(result)
result_tibble <- as_tibble(result_melt)
dat <- spread(result_tibble, Var2, value)
# consensus
dat <- filter(dat, !(Var1 %in% c("FABIA_truth","Bicmix_truth", "FABIAS", "FABIAS_truth", "CCS")))
labels <- unique(dat$Var1)
labels <- as.character(labels)
labels[which(labels == "SSLB_PY")] <- "SSLB-PY"
labels[which(labels == "SSLB_IBP")] <- "SSLB-IBP"
labels[which(labels == "SSLB_BB")] <- "SSLB-BB"
labels[which(labels == "Bicmix")] <- "BicMix"
g <- ggplot(dat, aes(Var1, consensus))
g <- g + geom_boxplot(aes(fill = Var1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "", y = "Consensus")
g <- g + scale_x_discrete(labels = labels)
g <- g + theme(axis.text.x=element_text(color = "black", size=15, angle=0))
g <- g + theme(legend.position="none")
g <- g + theme(axis.ticks = element_blank())
g <- g + theme(text = element_text(size=20))
g
pdf(file = "figures/consensus.pdf", width = 6, height = 3.5, pointsize = 14)
g
dev.off()
# relevance and recovery
g <- ggplot(dat, aes(recovery, relevance))
g <- g + geom_point(aes(color = Var1, shape = Var1))
g <- g + scale_x_continuous(limits = c(0, 1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "Recovery", y = "Relevance")
g <- g + scale_color_discrete(labels = labels)
g <- g + scale_shape_discrete(labels = labels)
g <- g + theme(legend.title=element_blank())
g <- g + theme(text = element_text(size=20))
g
pdf(file = "figures/rr.pdf", width = 6, height = 4, pointsize = 14)
g
dev.off()
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/sim_study_2")
load( "results/sigma_1.RData")
result_melt <- melt(result)
result_tibble <- as_tibble(result_melt)
dat <- spread(result_tibble, Var2, value)
# consensus
dat <- filter(dat, !(Var1 %in% c("FABIA_truth","Bicmix_truth", "FABIAS", "FABIAS_truth", "CCS")))
labels <- unique(dat$Var1)
labels <- as.character(labels)
labels[which(labels == "SSLB_PY")] <- "SSLB-PY"
labels[which(labels == "SSLB_IBP")] <- "SSLB-IBP"
labels[which(labels == "SSLB_BB")] <- "SSLB-BB"
labels[which(labels == "Bicmix")] <- "BicMix"
g <- ggplot(dat, aes(recovery, relevance))
g <- g + geom_point(aes(color = Var1, shape = Var1))
g <- g + scale_x_continuous(limits = c(0, 1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "Recovery", y = "Relevance")
g <- g + scale_color_discrete(labels = labels)
g <- g + scale_shape_discrete(labels = labels)
g <- g + theme(legend.title=element_blank())
g <- g + theme(text = element_text(size=20))
g
pdf(file = "figures/rr.pdf", width = 6, height = 4, pointsize = 14)
g
dev.off()
for (r in 1:nrep) {
dir <- paste("data/rep", r, sep = "")
# system2("mkdir", dir)
# generate data
if (GEN_DATA) {
get_data <- generate_dense_bic(n_f = N, n_l = G, n_bic = K, n_dense = 5, min_f = 5, max_f = 20,
min_l = 10, max_l = 50, overlap_f = 5, overlap_l = 15,
mean_f = 2, sd_f = 1, mean_l = 3, sd_l = 1,
sd_f_dense = 2, sd_l_dense = 2,
sd_f_noise = 0.2, sd_l_noise = 0.2, sd_epsilon = 1)
Y <- get_data$data
X <- get_data$factors_bic
B <- get_data$loadings_bic
write.table(t(Y), file = paste(dir, "/Y.txt", sep = ""), row.names = FALSE, col.names = FALSE)
write.table(X, file = paste(dir, "/X.txt", sep = ""), row.names = FALSE, col.names = FALSE)
write.table(B, file = paste(dir, "/B.txt", sep = ""), row.names = FALSE, col.names = FALSE)
} else {
Y <- as.matrix(read.table(file = paste(dir, "/Y.txt", sep = "")))
Y <- t(Y)
X <- as.matrix(read.table(file = paste(dir, "/X.txt", sep = "")))
B <- as.matrix(read.table(file = paste(dir, "/B.txt", sep = "")))
}
#---------------------------
# SSLB
#---------------------------
if (RUN_SSLB) {
lambda1 <- 1
lambda1_tilde <- 1
lambda0s <- c(1, 5, 10, 50, 100, 500, 1000, 10000, 100000, 1000000, 10000000)
lambda0_tildes <- lambda0s
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0.5,
IBP = 1, EPSILON = 0.01))
X_col <- which(apply(out$X, 2, function(x) sum(x != 0)) < 0.5 * N)
B_col <- which(apply(out$B, 2, function(x) sum(x != 0)) < 0.5 * G)
keep <- intersect(X_col, B_col)
X_SSLB <- out$X[, keep]
B_SSLB <- out$B[, keep]
K_SSLB <- ncol(B_SSLB)
if(out$K > 0) {
result_SSLB <- analyze_bic(X_SSLB, B_SSLB, X, B)
result["SSLB_PY", "consensus", r] <- result_SSLB$consensus
result["SSLB_PY", "recovery", r] <- result_SSLB$recovery
result["SSLB_PY", "relevance", r] <- result_SSLB$relevance
result["SSLB_PY", "K", r] <- K_SSLB
} else {
result["SSLB_PY", "K", r] <- K_SSLB
}
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 1, EPSILON = 0.01))
X_SSLB <- out$X
B_SSLB <- out$B
X_col <- which(apply(X_SSLB, 2, function(x) sum(x != 0)) < 0.5 * N)
B_col <- which(apply(B_SSLB, 2, function(x) sum(x != 0)) < 0.5 * G)
keep <- intersect(X_col, B_col)
X_SSLB <- out$X[, keep]
B_SSLB <- out$B[, keep]
K_SSLB <- ncol(B_SSLB)
if(out$K > 0) {
result_SSLB <- analyze_bic(X_SSLB, B_SSLB, X, B)
result["SSLB_IBP", "consensus", r] <- result_SSLB$consensus
result["SSLB_IBP", "recovery", r] <- result_SSLB$recovery
result["SSLB_IBP", "relevance", r] <- result_SSLB$relevance
result["SSLB_IBP", "K", r] <- K_SSLB
} else {
result["SSLB_IBP", "K", r] <- K_SSLB
}
SSLB_output <- capture.output(out <- SSLB(Y,
K_init,
lambda0s = lambda0s,
lambda0_tildes = lambda0_tildes,
lambda1 = lambda1,
lambda1_tilde = lambda1_tilde,
alpha = 1,
d = 0,
IBP = 0, EPSILON = 0.01))
X_col <- which(apply(out$X, 2, function(x) sum(x != 0)) < 0.5 * N)
B_col <- which(apply(out$B, 2, function(x) sum(x != 0)) < 0.5 * G)
keep <- intersect(X_col, B_col)
X_SSLB <- out$X[, keep]
B_SSLB <- out$B[, keep]
K_SSLB <- ncol(B_SSLB)
if(out$K > 0) {
result_SSLB <- analyze_bic(X_SSLB, B_SSLB, X, B)
result["SSLB_BB", "consensus", r] <- result_SSLB$consensus
result["SSLB_BB", "recovery", r] <- result_SSLB$recovery
result["SSLB_BB", "relevance", r] <- result_SSLB$relevance
result["SSLB_BB", "K", r] <- K_SSLB
} else {
result["SSLB_BB", "K", r] <- K_SSLB
}
}
if (RUN_BICMIX) {
#---------------------------
# Bicmix
#---------------------------
system2("mkdir", paste(dir, "/result", sep = ""))
bicmix_output <- system2(bicmix_dir,
args = c("--nf", as.character(K_init),
"--y", paste(dir, "/Y.txt", sep = ""),
"--out", paste(dir, "/result", sep = ""), "--sep space"),
stdout = T)
X_bicmix <- try(as.matrix(read.table(paste(dir, "/result/EX", sep = ""), header = F)), silent = TRUE)
if (inherits(X_bicmix, 'try-error')) {
X_bicmix <- matrix(0, nrow = K, ncol = N)
}
X_bicmix <- t(X_bicmix)
B_bicmix <- try(as.matrix(read.table(paste(dir, "/result/LAM", sep = ""), header = F)), silent = TRUE)
if (inherits(B_bicmix, 'try-error')) {
B_bicmix <- matrix(0, nrow = G, ncol = K)
}
Z_bicmix <- try(as.matrix(read.table(paste(dir, "/result/Z", sep = ""), header = F)), silent = TRUE)
O_bicmix <- try(as.matrix(read.table(paste(dir, "/result/O", sep = ""), header = F)), silent = TRUE)
keep <- rbind(Z_bicmix[1,], O_bicmix[1,])
keep <- apply(keep, 2, sum)
keep <- which(keep == 2)
X_bicmix <- X_bicmix[, keep]
B_bicmix <- B_bicmix[, keep]
X_bicmix[abs(X_bicmix) < 10e-10] <- 0
B_bicmix[abs(B_bicmix) < 10e-10] <- 0
zeroes_B <- which(apply(B_bicmix, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_bicmix, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_bicmix <- as.matrix(X_bicmix[, -zeroes])
B_bicmix <- as.matrix(B_bicmix[, -zeroes])
}
X_norm <- apply(X_bicmix, 2, function(x) sqrt(sum(x^2)))
B_norm <- apply(B_bicmix, 2, function(x) sqrt(sum(x^2)))
d <- sqrt(X_norm/B_norm)
X_bicmix <- t(1/d * t(X_bicmix))
B_bicmix <- t(d * t(B_bicmix))
K_bicmix <- ncol(X_bicmix)
if (K_bicmix > 0) {
result_bicmix <- analyze_bic(X_bicmix, B_bicmix, X, B)
result["Bicmix", "consensus", r] <- result_bicmix$consensus
result["Bicmix", "recovery", r] <- result_bicmix$recovery
result["Bicmix", "relevance", r] <- result_bicmix$relevance
result["Bicmix", "K", r] <- K_bicmix
} else {
result["Bicmix", "K", r] <- K_bicmix
}
#---------------------------
# Bicmix_truth
#---------------------------
bicmix_thresh <- seq(0.1, 5, length.out = 100)
bicmix_consensus <- numeric(100)
for(i in 1:100) {
X_temp <- X_bicmix
B_temp <- B_bicmix
X_temp[abs(X_temp) < bicmix_thresh[i]] <- 0
B_temp[abs(B_temp) < bicmix_thresh[i]] <- 0
bicmix_consensus[i] <- analyze_bic(X_temp, B_temp, X, B)$consensus
}
best <- which.max(bicmix_consensus)
X_bicmix_truth <- X_bicmix
B_bicmix_truth <- B_bicmix
X_bicmix_truth[abs(X_bicmix_truth) < bicmix_thresh[best]] <- 0
B_bicmix_truth[abs(B_bicmix_truth) < bicmix_thresh[best]] <- 0
zeroes_B <- which(apply(B_bicmix_truth, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_bicmix_truth, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_bicmix <- as.matrix(X_bicmix[, -zeroes])
B_bicmix <- as.matrix(B_bicmix[, -zeroes])
}
K_bicmix <- ncol(B_bicmix)
if (K_bicmix > 0) {
result_bicmix <- analyze_bic(X_bicmix_truth, B_bicmix_truth, X, B)
result["Bicmix_truth", "consensus", r] <- result_bicmix$consensus
result["Bicmix_truth", "recovery", r] <- result_bicmix$recovery
result["Bicmix_truth", "relevance", r] <- result_bicmix$relevance
result["Bicmix_truth", "K", r] <- K_bicmix
} else {
result["Bicmix_truth", "K", r] <- K_bicmix
}
}
#---------------------------
# FABIA
#---------------------------
if (RUN_FABIA) {
# Y_svd <- svd(Y)
# Y_FABIA <- Y_svd$u[,-c(1:6)] %*% (Y_svd$d[-c(1:6)] * t(Y_svd$v[, -c(1:6)]))
# K_svd <- K - 6
Y_FABIA <- Y
K_svd <- K
FABIA_output <- capture.output(out_FABIA <- fabia(t(Y_FABIA), K_svd), type = "message")
FABIA_biclusters <- extractBic(out_FABIA)
B_FABIA <- matrix(0, nrow = G, ncol = K)
X_FABIA <- matrix(0, nrow = N, ncol = K)
for(k in 1:K_svd) {
B_FABIA[FABIA_biclusters$numn[k,]$numng, k] <- 1
X_FABIA[FABIA_biclusters$numn[k,]$numnp, k] <- 1
}
zeroes_B <- which(apply(B_FABIA, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIA, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIA <- as.matrix(X_FABIA[, -zeroes])
B_FABIA <- as.matrix(B_FABIA[, -zeroes])
}
X_col <- which(apply(X_FABIA, 2, function(x) sum(x != 0)) < 0.5 * N)
B_col <- which(apply(B_FABIA, 2, function(x) sum(x != 0)) < 0.5 * G)
keep <- intersect(X_col, B_col)
X_FABIA <- X_FABIA[, keep]
B_FABIA <- B_FABIA[, keep]
K_FABIA <- ncol(B_FABIA)
K_FABIA <- ncol(X_FABIA)
if (K_FABIA > 0) {
result_FABIA <- analyze_bic(X_FABIA, B_FABIA, X, B)
result["FABIA", "consensus", r] <- result_FABIA$consensus
result["FABIA", "recovery", r] <- result_FABIA$recovery
result["FABIA", "relevance", r] <- result_FABIA$relevance
result["FABIA", "K", r] <- K_FABIA
} else {
result["FABIA", "K", r] <- K_FABIA
}
#-------------------------------------------
# FABIA-truth
#-------------------------------------------
FABIA_thresh <- qunif(seq(0, 1, length.out = 100), min = 0.1, max = 5)
X_FABIA_thresh <- vector("list", 100)
B_FABIA_thresh <- vector("list", 100)
FABIA_consensus <- numeric(100)
for (i in 1:100) {
temp <- extractBic(out_FABIA, thresZ = FABIA_thresh[i])
B_temp <- matrix(0, nrow = G, ncol = K)
X_temp <- matrix(0, nrow = N, ncol = K)
for(k in 1:K_svd) {
B_temp[temp$numn[k,]$numng, k] <- 1
X_temp[temp$numn[k,]$numnp, k] <- 1
}
zeroes_B <- which(apply(B_temp, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_temp, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if(length(zeroes) > 0) {
B_temp <- as.matrix(B_temp[, -zeroes])
X_temp <- as.matrix(X_temp[, -zeroes])
}
FABIA_consensus[i] <- analyze_bic(X_temp, B_temp, X, B)$consensus
X_FABIA_thresh[[i]] <- X_temp
B_FABIA_thresh[[i]] <- B_temp
}
FABIA_truth <- which.max(FABIA_consensus)
X_FABIA_truth <- X_FABIA_thresh[[FABIA_truth]]
B_FABIA_truth <- B_FABIA_thresh[[FABIA_truth]]
K_FABIA_truth <- ncol(X_FABIA_truth)
if (K_FABIA_truth > 0) {
result_FABIA_truth <- analyze_bic(X_FABIA_truth, B_FABIA_truth, X, B)
result["FABIA_truth", "consensus", r] <- result_FABIA_truth$consensus
result["FABIA_truth", "recovery", r] <- result_FABIA_truth$recovery
result["FABIA_truth", "relevance", r] <- result_FABIA_truth$relevance
result["FABIA_truth", "K", r] <- K_FABIA_truth
} else {
result["FABIA_truth", "K", r] <- K_FABIA_truth
}
#---------------------------
# FABIAS
#---------------------------
FABIAS_output <- capture.output(out_FABIAS <- fabias(t(Y_FABIA), K_svd), type = "message")
FABIAS_biclusters <- extractBic(out_FABIAS)
B_FABIAS <- matrix(0, nrow = G, ncol = K)
X_FABIAS <- matrix(0, nrow = N, ncol = K)
for(k in 1:K_svd) {
B_FABIAS[FABIAS_biclusters$numn[k,]$numng, k] <- 1
X_FABIAS[FABIAS_biclusters$numn[k,]$numnp, k] <- 1
}
zeroes_B <- which(apply(B_FABIAS, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIAS, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIAS <- as.matrix(X_FABIAS[, -zeroes])
B_FABIAS <- as.matrix(B_FABIAS[, -zeroes])
}
K_FABIAS <- ncol(X_FABIAS)
if (K_FABIAS > 0) {
result_FABIAS <- analyze_bic(X_FABIAS, B_FABIAS, X, B)
result["FABIAS", "consensus", r] <- result_FABIAS$consensus
result["FABIAS", "recovery", r] <- result_FABIAS$recovery
result["FABIAS", "relevance", r] <- result_FABIAS$relevance
result["FABIAS", "K", r] <- K_FABIAS
} else {
result["FABIAS", "K", r] <- K_FABIAS
}
#-------------------------------------------
# FABIAS-truth
#-------------------------------------------
FABIAS_thresh <- qunif(seq(0, 1, length.out = 100), min = 0.1, max = 5)
X_FABIAS_thresh <- vector("list", 100)
B_FABIAS_thresh <- vector("list", 100)
FABIAS_consensus <- numeric(100)
for (i in 1:100) {
temp <- extractBic(out_FABIAS, thresZ = FABIAS_thresh[i])
B_temp <- matrix(0, nrow = G, ncol = K)
X_temp <- matrix(0, nrow = N, ncol = K)
for(k in 1:K_svd) {
B_temp[temp$numn[k,]$numng, k] <- 1
X_temp[temp$numn[k,]$numnp, k] <- 1
}
zeroes_B <- which(apply(B_temp, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_temp, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if(length(zeroes) > 0) {
B_temp <- as.matrix(B_temp[, -zeroes])
X_temp <- as.matrix(X_temp[, -zeroes])
}
FABIAS_consensus[i] <- analyze_bic(X_temp, B_temp, X, B)$consensus
X_FABIAS_thresh[[i]] <- X_temp
B_FABIAS_thresh[[i]] <- B_temp
}
FABIAS_truth <- which.max(FABIAS_consensus)
X_FABIAS_truth <- X_FABIAS_thresh[[FABIAS_truth]]
B_FABIAS_truth <- B_FABIAS_thresh[[FABIAS_truth]]
K_FABIAS_truth <- ncol(X_FABIAS_truth)
if (K_FABIAS_truth > 0) {
result_FABIAS_truth <- analyze_bic(X_FABIAS_truth, B_FABIAS_truth, X, B)
result["FABIAS_truth", "consensus", r] <- result_FABIAS_truth$consensus
result["FABIAS_truth", "recovery", r] <- result_FABIAS_truth$recovery
result["FABIAS_truth", "relevance", r] <- result_FABIAS_truth$relevance
result["FABIAS_truth", "K", r] <- K_FABIAS_truth
} else {
result["FABIAS_truth", "K", r] <- K_FABIAS_truth
}
}
print(r)
}
plot_matrix(X_FABIA)
result_melt <- melt(result)
result_tibble <- as_tibble(result_melt)
dat <- spread(result_tibble, Var2, value)
# consensus
dat <- filter(dat, !(Var1 %in% c("FABIA_truth","Bicmix_truth", "FABIAS", "FABIAS_truth", "CCS")))
labels <- unique(dat$Var1)
labels <- as.character(labels)
labels[which(labels == "SSLB_PY")] <- "SSLB-PY"
labels[which(labels == "SSLB_IBP")] <- "SSLB-IBP"
labels[which(labels == "SSLB_BB")] <- "SSLB-BB"
labels[which(labels == "Bicmix")] <- "BicMix"
g <- ggplot(dat, aes(Var1, consensus))
g <- g + geom_boxplot(aes(fill = Var1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "", y = "Consensus")
g <- g + scale_x_discrete(labels = labels)
g <- g + theme(axis.text.x=element_text(color = "black", size=15, angle=0))
g <- g + theme(legend.position="none")
g <- g + theme(axis.ticks = element_blank())
g <- g + theme(text = element_text(size=20))
g
g <- ggplot(dat, aes(recovery, relevance))
g <- g + geom_point(aes(color = Var1, shape = Var1))
g <- g + scale_x_continuous(limits = c(0, 1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "Recovery", y = "Relevance")
g <- g + scale_color_discrete(labels = labels)
g <- g + scale_shape_discrete(labels = labels)
g <- g + theme(legend.title=element_blank())
g <- g + theme(text = element_text(size=20))
g
K_FABIA
