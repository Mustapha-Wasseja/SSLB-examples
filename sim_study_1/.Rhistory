b/(a-1)
dinvgamma(2.5, a, b)
abline(h =   0.1151238, col = "blue")
dinvgamma(0.01, a, b)
dinvgamma(1, a, b)
dinvgamma(0.75, a, b)
dinvgamma(0.25, a, b)
dinvgamma(0.1, a, b)
x1 <- 0.1
x2 <- 0.25
for (i in 1:100) {
d_x1 <- dinvgamma(x1, a, b)
d_x2 <- dinvgamma(x2, a, b)
if (d_x1 > d_x2) {
x2 <- (x2 - x1)/2
} else {
x1 <- (x2 - x1)/2
}
}
x1
x2
d_x1
d_x2
0.15/2
target <- dinvgamma(2.5, a, b)
x1 <- 0.1
x2 <- 0.25
for (i in 1:100) {
d_x1 <- dinvgamma(x1, a, b)
d_x2 <- dinvgamma(x2, a, b)
if (abs(d_x1 - target) < abs(d_x2 - target)) {
x2 <- (x2 - x1)/2
} else {
x1 <- (x2 - x1)/2
}
}
x1
x2
abs(d_x1 - target)
abs(d_x2 - target)
for (i in 1:100) {
d_x1 <- dinvgamma(x1, a, b)
d_x2 <- dinvgamma(x2, a, b)
if (abs(d_x1 - target) > abs(d_x2 - target)) {
x1 <- (x2 - x1)/2
} else {
x2 <- (x2 - x1)/2
}
}
x1
x2
target <- dinvgamma(2.5, a, b)
x1 <- 0.1
x2 <- 0.25
for (i in 1:100) {
d_x1 <- dinvgamma(x1, a, b)
d_x2 <- dinvgamma(x2, a, b)
if (abs(d_x1 - target) > abs(d_x2 - target)) {
x1 <- x1 + (x2 - x1)/2
} else {
x2 <- x2 - (x2 - x1)/2
}
}
x1
x2
d_x1
target
x <- seq(0.001, 10, by = 0.001)
a <- 3/2
b <- 3/2
plot(x, dinvgamma(x, a, b), type = "l")
abline(v = b/(a - 1), col = "red")
abline(h =  0.1151238, col = "blue")
pinvgamma(2.5, a, b) - pinvgamma(x1, a, b)
library(ggplot2)
x <- seq(0.001, 10, by = 0.001)
a <- 3/2
b <- 3/2
m <- b / (a - 1)
dat <- data.frame(x = x, y = dinvgamma(x, a, b))
g <- ggplot(dat, aes(x = x, y = y)) +
geom_line()
g
g <- ggplot(dat, aes(x = x, y = y)) +
geom_line() +
geom_abline(xintercept = m, color = "red")
g <- ggplot(dat, aes(x = x, y = y)) +
geom_line() +
geom_vline(xintercept = m, color = "red")
g
x_upper <- 2.5
target <- dinvgamma(x_upper, a, b)
x1 <- 0.1
x2 <- 0.25
for (i in 1:100) {
d_x1 <- dinvgamma(x1, a, b)
d_x2 <- dinvgamma(x2, a, b)
if (abs(d_x1 - target) > abs(d_x2 - target)) {
x1 <- x1 + (x2 - x1)/2
} else {
x2 <- x2 - (x2 - x1)/2
}
}
x_lower <- x1
pinvgamma(x_upper, a, b) - pinvgamma(x_lower, a, b)
x <- seq(x_lower, x_upper, by = 0.001)
y <- dinvgamma(x, a, b)
dat2 <- data.frame(x = x, y  = y)
g <- g + geom_area(dat2, aes(x = x, y = y))
g
g <- g + geom_area(data = dat2, mapping = aes(x = x, y = y))
g
g <- g + geom_area(data = dat2, mapping = aes(x = x, y = y), fill = "blue")
g
g <- g + geom_area(data = dat2, mapping = aes(x = x, y = y), fill = "blue")
g <- g + geom_text(aes(x = 1, y = 0.1, label = paste(round(p, 2), "%")))
g
p <- pinvgamma(x_upper, a, b) - pinvgamma(x_lower, a, b)
g
g <- ggplot(dat, aes(x = x, y = y)) +
geom_line() +
geom_vline(xintercept = m, color = "red")
g <- g + geom_area(data = dat2, mapping = aes(x = x, y = y), fill = "blue", alpha = 0.5)
g <- g + geom_text(aes(x = 1, y = 0.1, label = paste(round(p, 2), "%")))
g
g <- ggplot(dat, aes(x = x, y = y)) +
geom_line() +
geom_vline(xintercept = m, color = "red")
g <- g + geom_area(data = dat2, mapping = aes(x = x, y = y), fill = "blue", alpha = 0.5)
g <- g + geom_text(aes(x = 1, y = 0.1, label = paste(round(p, 2), "%", sep = "")))
g
g <- ggplot(dat, aes(x = x, y = y)) +
geom_line() +
geom_vline(xintercept = m, color = "red")
g <- g + geom_area(data = dat2, mapping = aes(x = x, y = y), fill = "blue", alpha = 0.5)
g <- g + geom_text(aes(x = 1.1, y = 0.1, label = paste(round(p, 2), "%", sep = "")))
g
source('~/Dropbox/~PhD/~Research/BART_FA/Code/R_functions/bart_fa.R', echo=TRUE)
source("../../Code/R_functions/plot_matrix.R")
set.seed(123)
N = 100   # Number of observations
G = 5 # Numbe of features
K = 1  # True number of factors
X_true = matrix(rnorm(N * K, mean = 0), nrow = N)
B = matrix(c(1, 2, 3, 4, 0), nrow = G, ncol = K)
B = cbind(B, c(rep(0, G-1), 5))
X_bind = cbind(X_true, X_true^2)
sigma_true = (0.5)
Y = X_bind %*% t(B) + matrix(rnorm(N * G, sd = sigma_true), nrow = N, ncol = G)
# MCMC parameters
iter = 2000 # number of samples
# Run Metropolis-Hastings
tune <- 1/sqrt(K)
# Run Metropolis-Hastings
tau2 <- 10
tune <- 2.38 / sqrt(K) * sqrt(tau2)
time = system.time(out <- bart_fa(Y, K, iter, tune = tune, scale = tau2))
out$X = X_true
out$sigma_true = sigma_true
X_samples = out$X_samples
Y_samples = out$Y_samples
plot(1:iter, out$s_samples[2,], type = "l")
plot(1:iter, X_samples[61,1,], type = "l")
#--------
burn <- 1000
Y_mean <- apply(Y_samples[,, (burn + 1):iter], c(1, 2), mean)
mean((out$Y - Y_mean)^2)
X_mean <- apply(X_samples[,, (burn + 1):iter], 1, mean)
groups = rep(1:5, rep(N, G))
dat = data.frame(y = as.vector(Y),
y_pred = as.vector(Y_mean),
x = rep(X_mean, G),
groups = groups)
b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = get_line$coefficients
}
# rescale for plot so b1 = 1
X_samples <- b[1] * X_samples
X_mean <- apply(X_samples[,, (burn + 1):iter], 1, mean)
dat$x <- rep(X_mean, G)
# refit
b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = round(get_line$coefficients, 2)
}
d = dat[groups == 5, ]
y = d$y
x = d$x
x2 = (d$x)^2
get_line = lm(y ~ x2 - 1)
coeff = round(get_line$coefficients, 2)
names(coeff) <- NULL
# equations for graph
line_labels = character(G)
for (j in 1:(G - 1)) {
line_labels[j] <- paste("y == ", b[j], "%.% x")
}
line_labels[G] <- paste("y == ", coeff, "%.% x^2")
dat$groups <- factor(groups, levels = 1:5, labels = line_labels)
# add fitted lines to graph
X_line <- seq(min(X_mean), max(X_mean), by = 0.01)
n_seq <- length(X_line)
Y_line <- matrix(0, nrow = n_seq, ncol = G)
for (j in 1:(G - 1)) {
Y_line[, j] <- X_line * b[j]
}
Y_line[, G] <- coeff[1] * X_line^2
dat_line <- data.frame(x = rep(X_line, G), y = as.vector(Y_line), groups = rep(1:5, rep(n_seq, G)))
dat_line$groups <- factor(dat_line$groups, levels = 1:5, labels = line_labels)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free_y", labeller = label_parsed, nrow = 1) +
theme_light()
g
library(ggplot2)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free_y", labeller = label_parsed, nrow = 1) +
theme_light()
g
mean(apply(out$accept, 1, sum)/iter)
median(apply(out$accept, 1, sum)/iter)
# Run Metropolis-Hastings
tau2 <- 10
tune <- 2.38 / sqrt(K)
time = system.time(out <- bart_fa(Y, K, iter, tune = tune, scale = tau2))
X_samples = out$X_samples
Y_samples = out$Y_samples
#--- trace
plot(1:iter, out$s_samples[2,], type = "l")
plot(1:iter, X_samples[61,1,], type = "l")
median(sum(out$accept, 1, sum)/iter)
median((out$accept, 1, sum)/iter)
median(out$accept, 1, sum)/iter)
median(apply(out$accept, 1, sum)/iter)
#--------
burn <- 1000
Y_mean <- apply(Y_samples[,, (burn + 1):iter], c(1, 2), mean)
mean((out$Y - Y_mean)^2)
X_mean <- apply(X_samples[,, (burn + 1):iter], 1, mean)
# Y vs X plot------------------------------------
groups = rep(1:5, rep(N, G))
dat = data.frame(y = as.vector(Y),
y_pred = as.vector(Y_mean),
x = rep(X_mean, G),
groups = groups)
b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = get_line$coefficients
}
# rescale for plot so b1 = 1
X_samples <- b[1] * X_samples
X_mean <- apply(X_samples[,, (burn + 1):iter], 1, mean)
dat$x <- rep(X_mean, G)
# refit
b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = round(get_line$coefficients, 2)
}
d = dat[groups == 5, ]
y = d$y
x = d$x
x2 = (d$x)^2
get_line = lm(y ~ x2 - 1)
coeff = round(get_line$coefficients, 2)
names(coeff) <- NULL
# equations for graph
line_labels = character(G)
for (j in 1:(G - 1)) {
line_labels[j] <- paste("y == ", b[j], "%.% x")
}
line_labels[G] <- paste("y == ", coeff, "%.% x^2")
dat$groups <- factor(groups, levels = 1:5, labels = line_labels)
# add fitted lines to graph
X_line <- seq(min(X_mean), max(X_mean), by = 0.01)
n_seq <- length(X_line)
Y_line <- matrix(0, nrow = n_seq, ncol = G)
for (j in 1:(G - 1)) {
Y_line[, j] <- X_line * b[j]
}
Y_line[, G] <- coeff[1] * X_line^2
dat_line <- data.frame(x = rep(X_line, G), y = as.vector(Y_line), groups = rep(1:5, rep(n_seq, G)))
dat_line$groups <- factor(dat_line$groups, levels = 1:5, labels = line_labels)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free_y", labeller = label_parsed, nrow = 1) +
theme_light()
g
dat$labels <- groups
g <- ggplot(dat, aes(x = y, y = y_pred)) +
geom_point() +
theme_light() +
geom_abline(intercept = 0, slope = 1, color = "red") +
facet_wrap(~ labels, scales = "free", nrow = 1)
g
source('~/Dropbox/~PhD/~Research/BART_FA/Code/R_functions/bart_fa.R', echo=TRUE)
time = system.time(out <- bart_fa(Y, K, iter, tune = tune, scale = tau2))
X_samples = out$X_samples
Y_samples = out$Y_samples
#--- trace
plot(1:iter, out$s_samples[2,], type = "l")
plot(1:iter, X_samples[61,1,], type = "l")
#--------
burn <- 1000
Y_mean <- apply(Y_samples[,, (burn + 1):iter], c(1, 2), mean)
mean((out$Y - Y_mean)^2)
X_mean <- apply(X_samples[,, (burn + 1):iter], 1, mean)
# Y vs X plot------------------------------------
groups = rep(1:5, rep(N, G))
dat = data.frame(y = as.vector(Y),
y_pred = as.vector(Y_mean),
x = rep(X_mean, G),
groups = groups)
b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = get_line$coefficients
}
# rescale for plot so b1 = 1
X_samples <- b[1] * X_samples
X_mean <- apply(X_samples[,, (burn + 1):iter], 1, mean)
dat$x <- rep(X_mean, G)
# refit
b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = round(get_line$coefficients, 2)
}
d = dat[groups == 5, ]
y = d$y
x = d$x
x2 = (d$x)^2
get_line = lm(y ~ x2 - 1)
coeff = round(get_line$coefficients, 2)
names(coeff) <- NULL
# equations for graph
line_labels = character(G)
for (j in 1:(G - 1)) {
line_labels[j] <- paste("y == ", b[j], "%.% x")
}
line_labels[G] <- paste("y == ", coeff, "%.% x^2")
dat$groups <- factor(groups, levels = 1:5, labels = line_labels)
# add fitted lines to graph
X_line <- seq(min(X_mean), max(X_mean), by = 0.01)
n_seq <- length(X_line)
Y_line <- matrix(0, nrow = n_seq, ncol = G)
for (j in 1:(G - 1)) {
Y_line[, j] <- X_line * b[j]
}
Y_line[, G] <- coeff[1] * X_line^2
dat_line <- data.frame(x = rep(X_line, G), y = as.vector(Y_line), groups = rep(1:5, rep(n_seq, G)))
dat_line$groups <- factor(dat_line$groups, levels = 1:5, labels = line_labels)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free_y", labeller = label_parsed, nrow = 1) +
theme_light()
g
dat$labels <- groups
g <- ggplot(dat, aes(x = y, y = y_pred)) +
geom_point() +
theme_light() +
geom_abline(intercept = 0, slope = 1, color = "red") +
facet_wrap(~ labels, scales = "free", nrow = 1)
g
setwd("~/Dropbox/~PhD/~Research/BART_FA/Examples/applicant")
Y <- read.table("applicant.txt")
Y <- as.matrix(Y)
dimY
dim(Y)
library(ggplot2)
plotmatrix(Y)
test <- melt(Y)
library(reshape2)
test <- melt(Y)
test[1:10,]
unique(test$Var1)
ggplot(dat, aes(x = value, y = value)) + facet_grid(Var2 ~ Var 2) + geom_point()
library(lattice)
splom(Y)
splom(Y[1:10,])
splom(Y[1:5,])
splom(Y[,1:5])
splom(Y)
splom(Y[, 1:7])
par(pch = 16)
splom(Y[, 1:7])
splom(Y[, 1:7], pch = 16)
library(MCMCpack)
library(ggplot2)
library(reshape2)
#-----------------------------------------------------------------------
# Functions
#-----------------------------------------------------------------------
# Gibbs sampler to compute posterior means for the independent prior
gibbs_rr <- function(iter = 1000, burn = 500, Y, X, tXY, tXX, tau) {
tot <- iter + burn
p <- ncol(X)
n <- nrow(X)
b <- matrix(0, nrow = p, ncol = iter)
s <- rep(0, iter)
beta <- rnorm(0, p)
sigma2 <- 1
for(i in 1:tot) {
V <- chol2inv(chol(tXX / sigma2 + diag(p) / tau^2))
beta_mean <- 1/sigma2 * crossprod(V, tXY)
beta <- mvrnorm(1, mu = beta_mean, Sigma = V)
rss <- sum((Y - X%*%beta)^2)
sigma2 <- rinvgamma(1, n/2, rss/2)
if (i > burn) {
b[, i - burn] <- beta
s[i - burn] <- sigma2
}
}
beta <- apply(b, 1, mean)
sigma2 <- mean(s)
return(list(beta = beta, sigma2 = sigma2))
}
#-----------------------------------------------------------------------
# Parameters
#
# n: number of observations
# p: number of covariates
# Y: response vector (n x 1)
# X: matrix of predictors (n x p)
# beta: true coefficient vector (p x 1)
# q: number of non-zero beta
# sd.true: true error variance
# tau: hyper-parameter for prior on beta
#-----------------------------------------------------------------------
n <- 100
p <- 90
q <- 90
tau <- 10
sd.true <- sqrt(3)
beta_vals <- c(-2.5, -2, -1.5, 1.5, 2, 2.5)
index <- sample(1:p, q)
beta <- rep(0, p)
beta[index] <- beta_vals
# store values
nrep <- 100
sigmas <- matrix(NA, nrow = nrep, ncol = 4)
betas <- array(NA, dim = c(nrep, p, 4))
i <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- X%*%beta + rnorm(n, sd = sd.true)
Y <- as.vector(Y)
tXX <- crossprod(X)
tXY <- crossprod(X, Y)
# LS
ls <- summary(lm(Y ~ X - 1))
rmse <- ls$sigma
ls_b <- ls$coefficients[,1]
# Conjugate
V_conj <- chol2inv(chol(tXX + diag(p) / tau^2))
beta_conj <- V_conj %*% tXY
H_conj <-  X %*% V_conj %*% t(X)
sigma2_conj <- (t(Y) %*% (diag(n) - H_conj) %*% Y)/(n - 2)
# Conjugate with Zellner's prior
V_zell <- tau^2/(1 + tau^2) * chol2inv(chol(tXX))
beta_zell <- V_zell %*% tXY
H_zell <- X %*% V_zell %*% t(X)
sigma2_zell <- (t(Y) %*% (diag(n) - H_zell) %*% Y)/(n - 2)
# Independent prior
ind_out <- gibbs_rr(iter = 1000, burn = 500, Y, X, tXY, tXX, tau)
beta_ind <- ind_out$beta
sigma2_ind <- ind_out$sigma2
hist(sigma2_conj * V_conj)
hist(abs(sigma2_conj) * V_conj)
hist(as.vector(sigma2_conj) * V_conj)
hist(diag(as.vector(sigma2_conj) * V_conj))
summary(ls)
ls
ls$coefficients
hist(ls$coefficients[,2])
hist(ls$coefficients[,2], xlim = c(0, 1))
hist(diag(as.vector(sigma2_conj) * V_conj))
hist(ls$coefficients[,2], xlim = c(0, 1))
hist(diag(as.vector(sigma2_conj) * V_conj), add = T, col = "blue")
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/sim_study_1")
library(fabia)
fabia
extractBic
SSLB
library(SSLB)
SSLB
