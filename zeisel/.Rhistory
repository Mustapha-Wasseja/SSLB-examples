line_labels[1] =  paste("y['.1] == ", b[1], "%.% x[1]")
line_labels[2] =  paste("y['.2'] == ", b[2], "%.% x[1]")
line_labels[3] =  paste("y['.3'] == ", b[3], "%.% x[1]^2")
line_labels[4] =  paste("y['.4'] == ", b[4], "%.% x[2]")
line_labels[5] =  paste("y['.5'] == ", b[5], "%.% x[2]")
line_labels[6] =  paste("y['.6'] == ", b[6], "%.% sin(x[2])")
dat$groups <- factor(groups, levels = 1:6, labels = line_labels)
# add fitted lines to graph
min_1 <- min(dat$x[groups %in% c(1, 2, 3)])
max_1 <- max(dat$x[groups %in% c(1, 2, 3)])
X_line_1 <- seq(min_1, max_1, by = 0.01)
n_seq <- length(X_line_1)
Y_line <- matrix(0, nrow = n_seq, ncol = 6)
Y_line[, 1] <- b[1] * X_line_1
Y_line[, 2] <- b[2] * X_line_1
Y_line[, 3] <- b[3] * X_line_1^2
min_2 <- min(dat$x[groups %in% c(4, 5, 6)])
max_2 <- max(dat$x[groups %in% c( 4, 5, 6)])
X_line_2 <- seq(min_2, max_2, length.out = n_seq)
Y_line[, 4] <- b[4] * X_line_2
Y_line[, 5] <- b[5] * X_line_2
Y_line[, 6] <- b[6] * sin(X_line_2)
dat_line <- data.frame(x = c(rep(X_line_1, 3), rep(X_line_2, 3)),
y = as.vector(Y_line),
groups = rep(1:6, rep(n_seq, 6)))
dat_line$groups <- factor(dat_line$groups, levels = 1:6, labels = line_labels)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free", labeller = label_parsed, nrow = 1) +
theme_light() +
theme(strip.background =element_rect(fill= "lightgrey")) +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.text = element_text(size= 12))
g
# equations for graph
line_labels = character(6)
line_labels[1] =  paste("y['.1'] == ", b[1], "%.% x[1]")
line_labels[2] =  paste("y['.2'] == ", b[2], "%.% x[1]")
line_labels[3] =  paste("y['.3'] == ", b[3], "%.% x[1]^2")
line_labels[4] =  paste("y['.4'] == ", b[4], "%.% x[2]")
line_labels[5] =  paste("y['.5'] == ", b[5], "%.% x[2]")
line_labels[6] =  paste("y['.6'] == ", b[6], "%.% sin(x[2])")
dat$groups <- factor(groups, levels = 1:6, labels = line_labels)
# add fitted lines to graph
min_1 <- min(dat$x[groups %in% c(1, 2, 3)])
max_1 <- max(dat$x[groups %in% c(1, 2, 3)])
X_line_1 <- seq(min_1, max_1, by = 0.01)
n_seq <- length(X_line_1)
Y_line <- matrix(0, nrow = n_seq, ncol = 6)
Y_line[, 1] <- b[1] * X_line_1
Y_line[, 2] <- b[2] * X_line_1
Y_line[, 3] <- b[3] * X_line_1^2
min_2 <- min(dat$x[groups %in% c(4, 5, 6)])
max_2 <- max(dat$x[groups %in% c( 4, 5, 6)])
X_line_2 <- seq(min_2, max_2, length.out = n_seq)
Y_line[, 4] <- b[4] * X_line_2
Y_line[, 5] <- b[5] * X_line_2
Y_line[, 6] <- b[6] * sin(X_line_2)
dat_line <- data.frame(x = c(rep(X_line_1, 3), rep(X_line_2, 3)),
y = as.vector(Y_line),
groups = rep(1:6, rep(n_seq, 6)))
dat_line$groups <- factor(dat_line$groups, levels = 1:6, labels = line_labels)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free", labeller = label_parsed, nrow = 1) +
theme_light() +
theme(strip.background =element_rect(fill= "lightgrey")) +
theme(strip.text = element_text(colour = 'black')) +
theme(strip.text = element_text(size= 12))
g
pdf("figures/x_vs_y.pdf", width = 12, height = 2.5, pointsize = 10)
g
dev.off()
install.packages("rdrtoolbox")
BiocManager::install("RDRToolbox")
library(RDRToolbox)
# isomap
out_iso <- Isomap(Y)
N = 1000
K = 2
G = 3
tt <- sort((3 * pi/2) * (1 + 2 * runif(N)))
height <- 21 * runif(N)
x <- tt * cos(tt)
y <-height
z <-tt * sin(tt)
Y <- cbind(x, y, z)
# isomap
out_iso <- Isomap(Y)
x_iso <- as.data.frame(out_iso)
names(x_iso)
names(x_iso) <- c("V1", "V2")
x_iso$cols <- 1:N/N
g <- ggplot(x_tsne, aes(x = V1, y = V2, color = cols)) +
geom_point() +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none")
library(ggplot2)
g <- ggplot(x_tsne, aes(x = V1, y = V2, color = cols)) +
geom_point() +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none")
g <- ggplot(x_iso, aes(x = V1, y = V2, color = cols)) +
geom_point() +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none")
g
setwd("~/Dropbox/~PhD/~Research/BART_FA/Examples/swiss_roll")
pdf(file = "figures/swiss_roll_isomap.pdf", width = 4, height = 4)
g
dev.off()
setwd("~/Dropbox/~PhD/~Research/BART_FA/Examples/MNIST")
load("MNIST_large_subset.RData")
Y <- mnist_sub$Y
labels <- mnist_sub$labels
N <- nrow(Y)
library(Rtsne)
out_tsne = Rtsne(Y)
x_tsne <- as.data.frame(out_tsne$Y)
x_tsne$Numbers <- as.factor(labels)
g <- ggplot(x_tsne, aes(x = V1, y = V2, color = Numbers)) +
geom_point(size = 1.25) +
scale_color_brewer(palette = "Paired") +
theme_light()
g
library(ggplot2)
g <- ggplot(x_tsne, aes(x = V1, y = V2, color = Numbers)) +
geom_point(size = 1.25) +
scale_color_brewer(palette = "Paired") +
theme_light()
g
library(keras)
K <- keras::backend()
# Parameters --------------------------------------------------------------
batch_size <- 100L
original_dim <- 784L
latent_dim <- 2L
intermediate_dim <- 256L
epochs <- 50L
epsilon_std <- 1.0
# Model definition --------------------------------------------------------
x <- layer_input(shape = c(original_dim))
h <- layer_dense(x, intermediate_dim, activation = "relu")
z_mean <- layer_dense(h, latent_dim)
z_log_var <- layer_dense(h, latent_dim)
sampling <- function(arg){
z_mean <- arg[, 1:(latent_dim)]
z_log_var <- arg[, (latent_dim + 1):(2 * latent_dim)]
epsilon <- k_random_normal(
shape = c(k_shape(z_mean)[[1]]),
mean=0.,
stddev=epsilon_std
)
z_mean + k_exp(z_log_var/2)*epsilon
}
# note that "output_shape" isn't necessary with the TensorFlow backend
z <- layer_concatenate(list(z_mean, z_log_var)) %>%
layer_lambda(sampling)
# we instantiate these layers separately so as to reuse them later
decoder_h <- layer_dense(units = intermediate_dim, activation = "relu")
decoder_mean <- layer_dense(units = original_dim, activation = "sigmoid")
h_decoded <- decoder_h(z)
x_decoded_mean <- decoder_mean(h_decoded)
# end-to-end autoencoder
vae <- keras_model(x, x_decoded_mean)
# encoder, from inputs to latent space
encoder <- keras_model(x, z_mean)
# generator, from latent space to reconstructed inputs
decoder_input <- layer_input(shape = latent_dim)
h_decoded_2 <- decoder_h(decoder_input)
x_decoded_mean_2 <- decoder_mean(h_decoded_2)
generator <- keras_model(decoder_input, x_decoded_mean_2)
vae_loss <- function(x, x_decoded_mean){
xent_loss <- (original_dim/1.0)*loss_mean_squared_error(x, x_decoded_mean)
kl_loss <- -0.5*k_mean(1 + z_log_var - k_square(z_mean) - k_exp(z_log_var), axis = -1L)
xent_loss + kl_loss
}
vae %>% compile(optimizer = "rmsprop", loss = vae_loss)
x_train <- Y
x_test <- Y
# Model training ----------------------------------------------------------
vae %>% fit(
x_train, x_train,
shuffle = TRUE,
epochs = epochs,
batch_size = batch_size,
validation_data = list(x_test, x_test)
)
library(ggplot2)
library(dplyr)
x_test_encoded <- predict(encoder, x_test, batch_size = batch_size)
vae_dat <- x_test_encoded %>%
as_data_frame() %>%
mutate(Numbers = as.factor(labels))
g <- ggplot(vae_dat, aes(x = V1, y = V2, colour = Numbers)) +
geom_point(size = 1.25) +
scale_color_brewer(palette = "Paired") +
theme_light()
g
out_pca <- prcomp(Y)
x_pca <- out_pca$x[, 1:2]
x_pca <- as.data.frame(x_pca)
x_pca$Numbers <-as.factor(labels)
g <- ggplot(x_pca, aes(x = PC1, y = PC2, color = Numbers)) +
geom_point(size = 1.25) +
scale_color_brewer(palette = "Paired") +
theme_light()
g
citation("RDRToolbox")
source('C:/Users/gmoran/Dropbox/~PhD/~Research/BART_FA/Code/R_functions/bart_fa.R', echo=TRUE)
N = 1000
K = 2
G = 3
tt <- sort((3 * pi/2) * (1 + 2 * runif(N)))
height <- 21 * runif(N)
x <- tt * cos(tt)
y <-height
z <-tt * sin(tt)
Y <- cbind(x, y, z)
source("../../Code/R_functions/plot_matrix.R")
# MCMC parameters
iter <- 1000 # number of samples
# Run Metropolis-Hastings
tau <- sqrt(1)
tune <- 2.38/sqrt(K)
sigmas_init <- rep(1e-5, G)
temper <- 1
temper <- 5
time <- system.time(out_2 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
burn <- 500
X_mean <- apply(out_2$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
temper <- 10
time <- system.time(out_3 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
X_mean <- apply(out_3$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
temper <- 3
time <- system.time(out_1 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
burn <- 500
X_mean <- apply(out_1$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
temper <- 50
time <- system.time(out_3 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
X_mean <- apply(out_3$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
temper <- 20
time <- system.time(out_3 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
X_mean <- apply(out_3$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
temper <- 15
time <- system.time(out_3 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
X_mean <- apply(out_3$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
source('C:/Users/gmoran/Dropbox/~PhD/~Research/BART_FA/Code/R_functions/bart_fa.R', echo=TRUE)
source("../../Code/R_functions/plot_matrix.R")
N = 1000
K = 2
G = 3
tt <- sort((3 * pi/2) * (1 + 2 * runif(N)))
height <- 21 * runif(N)
x <- tt * cos(tt)
y <-height
z <-tt * sin(tt)
Y <- cbind(x, y, z)
# MCMC parameters
iter <- 1000 # number of samples
# Run Metropolis-Hastings
tau <- sqrt(1)
tune <- 2.38/sqrt(K)
sigmas_init <- rep(1e-5, G)
temper <- 0.05
time <- system.time(out_1 <- bart_fa(Y, K, iter, tune, x_sd = tau, sigmas_init = sigmas_init, temper = temper))
source('C:/Users/gmoran/Dropbox/~PhD/~Research/BART_FA/Examples/swiss_roll/swiss_roll.R', echo=TRUE)
burn <- 500
X_mean <- apply(out_1$X_samples[,, (burn + 1):iter], c(1, 2), mean)
X_mean <- as.data.frame(X_mean)
X_mean$cols <- 1:N/N
g <- ggplot(X_mean, aes(x = V1, y = V2, color = cols)) +
geom_point(size = 1) +
scale_color_gradientn(colours = rainbow(8)) +
theme_light() +
theme(legend.position = "none") +
xlab("X1") + ylab("X2")
g
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/zeisel")
source('~/Dropbox/~PhD/~Research/Biclustering/Code/functions.R', echo=TRUE)
library(org.Mm.eg.db)
library(clusterProfiler)
library(enrichplot)
load("SSLB_result/Y_ave_FINAL.RData")
genes <- read.table(file = "data/gene_info.txt", stringsAsFactors = F)
genes <- as.matrix(genes)
X_SSLB <- out$X
B_SSLB <- out$B
K_SSLB <- out$K
reorder <- union(c(4, 10,
5, 27, 26, 19, 29, 24,
3, 16, 21, 33,
1, 7, 14, 6, 22, 23,
2, 28, 15, 20, 11, 40,
32, 13, 39, 42, 41,
8, 34, 31, 30, 25,
9, 18, 12,
35, 43, 55, 63,
17, 38, 43), 1:out$K)
X_SSLB <- X_SSLB[, reorder]
B_SSLB <- B_SSLB[, reorder]
SSLB_hugo_list <- vector("list", K_SSLB)
SSLB_entrez_list <- vector("list", K_SSLB)
SSLB_enrichment <- vector("list", K_SSLB)
groups <- meta_data$group
subclasses <- as.numeric(factor(meta_data$level2class, levels = unique(meta_data$level2class)))
subclass_names <- as.character(meta_data$level2class)
group_names <- c("Interneurons", "S1 Pyramidal", "CA1 Pyramidal",
"Oligodendrocytes", "Microglia", "Endothelial",
"Astrocytes", "Ependymal", "Mural")
# this subclass has no category
no_cat <- unique(subclasses[meta_data$level2class == "(none)"])
# order by group and subclass given group
ord <- order(subclasses[which(groups == 1)])
old <- which(groups == 1)
for (i in 2:max(groups)) {
cur <- which(groups == i)
add <- max(old) + order(subclasses[cur])
old <- cur
ord <- c(ord, add)
}
n_groups <- max(groups)
label_data <- data.frame(x = rep(-5, n_groups),
y = c(2800, 2500, 1800, 1000, 520, 370, 200, 70, 10),
labels = group_names)
group_plot <- plot_matrix(groups[ord], title = "") +
scale_fill_gradientn(colors = brewer.paired(n_groups)) +
theme(plot.margin=unit(c(5.5, 5.5, 5.5, 45),"pt")) +
geom_text(data = label_data, aes(x = x, y = y, label = labels)) +
coord_cartesian(clip = 'off') +
theme(panel.border =element_blank())
subclass_cols <- numeric(max(subclasses))
subclass_cols[-c(no_cat)] <- brewer.paired(47)
subclass_cols[no_cat] <- "black"
subclass_plot <- plot_matrix(subclasses[ord], title = "") +
scale_fill_gradientn(colors = subclass_cols) +
theme(panel.border =element_blank())
X_SSLB <- out$X
X_SSLB[X_SSLB > 10] <- 10
X_SSLB[X_SSLB < -10] <- -10
B_SSLB <- out$B
K_SSLB <- out$K
library(pals)
N <- 3005
G <- 5000
meta_data <- read.table(file = "data/meta_data_mRNA.txt", stringsAsFactors = F)
cells <- read.table(file = "data/cell_info.txt", stringsAsFactors = F)
genes <- read.table(file = "data/gene_info.txt", stringsAsFactors = F)
cells <- as.matrix(cells)
genes <- as.matrix(genes)
groups <- meta_data$group
subclasses <- as.numeric(factor(meta_data$level2class, levels = unique(meta_data$level2class)))
subclass_names <- as.character(meta_data$level2class)
group_names <- c("Interneurons", "S1 Pyramidal", "CA1 Pyramidal",
"Oligodendrocytes", "Microglia", "Endothelial",
"Astrocytes", "Ependymal", "Mural")
# this subclass has no category
no_cat <- unique(subclasses[meta_data$level2class == "(none)"])
# order by group and subclass given group
ord <- order(subclasses[which(groups == 1)])
old <- which(groups == 1)
for (i in 2:max(groups)) {
cur <- which(groups == i)
add <- max(old) + order(subclasses[cur])
old <- cur
ord <- c(ord, add)
}
n_groups <- max(groups)
label_data <- data.frame(x = rep(-5, n_groups),
y = c(2800, 2500, 1800, 1000, 520, 370, 200, 70, 10),
labels = group_names)
group_plot <- plot_matrix(groups[ord], title = "") +
scale_fill_gradientn(colors = brewer.paired(n_groups)) +
theme(plot.margin=unit(c(5.5, 5.5, 5.5, 45),"pt")) +
geom_text(data = label_data, aes(x = x, y = y, label = labels)) +
coord_cartesian(clip = 'off') +
theme(panel.border =element_blank())
subclass_cols <- numeric(max(subclasses))
subclass_cols[-c(no_cat)] <- brewer.paired(47)
subclass_cols[no_cat] <- "black"
subclass_plot <- plot_matrix(subclasses[ord], title = "") +
scale_fill_gradientn(colors = subclass_cols) +
theme(panel.border =element_blank())
X_SSLB <- out$X
X_SSLB[X_SSLB > 10] <- 10
X_SSLB[X_SSLB < -10] <- -10
B_SSLB <- out$B
K_SSLB <- out$K
reorder <- union(c(4, 10,
5, 27, 26, 19, 29, 24,
3, 16, 21, 33,
1, 7, 14, 6, 22, 23,
2, 28, 15, 20, 11, 40,
32, 13, 39, 42, 41,
8, 34, 31, 30, 25,
9, 18, 12,
35, 43, 55, 63,
17, 38, 43), 1:out$K)
X_SSLB <- X_SSLB[, reorder]
B_SSLB <- B_SSLB[, reorder]
X_plot <- plot_matrix(X_SSLB[ord, ], title = "SSLB Factor Matrix")
X_plot
grid.arrange(group_plot, subclass_plot, X_plot, nrow = 1, widths = c(5, 1, 25))
load("SSLB_result/GO_enrichment.RData")
# Plots --------------------------
k <- 1
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.7)
emapplot(SSLB_enrichment[[k]], showCategory = 30)
emapplot(enrich_simple)
emapplot(enrich_simple, showCategory = 20)
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.5)
emapplot(enrich_simple, showCategory = 30)
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.6)
emapplot(enrich_simple, showCategory = 30)
emapplot(enrich_simple, showCategory = 20)
emapplot(enrich_simple, showCategory = 20)
emapplot(SSLB_enrichment[[k]], showCategory = 15)
emapplot(enrich_simple, showCategory = 30)
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.5)
emapplot(enrich_simple, showCategory = 30)
# Plots --------------------------
k <- 1
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.7)
emapplot(enrich_simple, showCategory = 25)
emapplot(enrich_simple, showCategory = 20)
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.6)
emapplot(enrich_simple, showCategory = 20)
emapplot(enrich_simple, showCategory = 25)
pdf(file = "figures/bic1_enrichment.pdf", width = 11, height = 7)
emapplot(enrich_simple, showCategory = 25)
dev.off()
# Plots --------------------------
k <- 2
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.6)
emapplot(enrich_simple, showCategory = 25)
pdf(file = "figures/bic2_enrichment.pdf", width = 11, height = 7)
emapplot(enrich_simple, showCategory = 25)
dev.off()
# Plots --------------------------
k <- 44
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.6)
emapplot(enrich_simple, showCategory = 25)
emapplot(SSLB_enrichment[[k]], showCategory = 30)
emapplot(SSLB_enrichment[[k]], showCategory = 25)
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.8)
emapplot(enrich_simple, showCategory = 25)
enrich_simple <- simplify(SSLB_enrichment[[k]], cutoff = 0.9)
emapplot(enrich_simple, showCategory = 25)
emapplot(enrich_simple, showCategory = 20)
emapplot(enrich_simple, showCategory = 30)
pdf(file = "figures/bic44_enrichment.pdf", width = 11, height = 7)
emapplot(enrich_simple, showCategory = 30)
dev.off()
