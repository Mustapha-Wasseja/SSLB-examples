b = numeric(4)
for(i in 1:4) {
d = dat[groups == i, ]
y = d$y
x = d$x
get_line = lm(y ~ x -1)
b[i] = round(get_line$coefficients, 2)
}
d = dat[groups == 5, ]
y = d$y
x = d$x
x2 = (d$x)^2
get_line = lm(y ~ x2 - 1)
coeff = round(get_line$coefficients, 2)
names(coeff) <- NULL
# equations for graph
line_labels = character(G)
for (j in 1:(G - 1)) {
line_labels[j] <- paste("y == ", b[j], "%.% x")
}
line_labels[G] <- paste("y == ", coeff, "%.% x^2")
dat$groups <- factor(groups, levels = 1:5, labels = line_labels)
# add fitted lines to graph
X_line <- seq(min(X_mean), max(X_mean), by = 0.01)
n_seq <- length(X_line)
Y_line <- matrix(0, nrow = n_seq, ncol = G)
for (j in 1:(G - 1)) {
Y_line[, j] <- X_line * b[j]
}
Y_line[, G] <- coeff[1] * X_line^2
dat_line <- data.frame(x = rep(X_line, G), y = as.vector(Y_line), groups = rep(1:5, rep(n_seq, G)))
dat_line$groups <- factor(dat_line$groups, levels = 1:5, labels = line_labels)
g <- ggplot(dat, aes(x = x, y = y)) +
geom_point() +
geom_line(data = dat_line, aes(x = x, y = y), color = "red") +
facet_wrap(~ groups, scales = "free_y", labeller = label_parsed, nrow = 1) +
theme_light()
g
dat$labels <- groups
g <- ggplot(dat, aes(x = y, y = y_pred)) +
geom_point() +
theme_light() +
geom_abline(intercept = 0, slope = 1, color = "red") +
facet_wrap(~ labels, scales = "free", nrow = 1)
g
setwd("~/Dropbox/~PhD/~Research/BART_FA/Examples/applicant")
Y <- read.table("applicant.txt")
Y <- as.matrix(Y)
dimY
dim(Y)
library(ggplot2)
plotmatrix(Y)
test <- melt(Y)
library(reshape2)
test <- melt(Y)
test[1:10,]
unique(test$Var1)
ggplot(dat, aes(x = value, y = value)) + facet_grid(Var2 ~ Var 2) + geom_point()
library(lattice)
splom(Y)
splom(Y[1:10,])
splom(Y[1:5,])
splom(Y[,1:5])
splom(Y)
splom(Y[, 1:7])
par(pch = 16)
splom(Y[, 1:7])
splom(Y[, 1:7], pch = 16)
library(MCMCpack)
library(ggplot2)
library(reshape2)
#-----------------------------------------------------------------------
# Functions
#-----------------------------------------------------------------------
# Gibbs sampler to compute posterior means for the independent prior
gibbs_rr <- function(iter = 1000, burn = 500, Y, X, tXY, tXX, tau) {
tot <- iter + burn
p <- ncol(X)
n <- nrow(X)
b <- matrix(0, nrow = p, ncol = iter)
s <- rep(0, iter)
beta <- rnorm(0, p)
sigma2 <- 1
for(i in 1:tot) {
V <- chol2inv(chol(tXX / sigma2 + diag(p) / tau^2))
beta_mean <- 1/sigma2 * crossprod(V, tXY)
beta <- mvrnorm(1, mu = beta_mean, Sigma = V)
rss <- sum((Y - X%*%beta)^2)
sigma2 <- rinvgamma(1, n/2, rss/2)
if (i > burn) {
b[, i - burn] <- beta
s[i - burn] <- sigma2
}
}
beta <- apply(b, 1, mean)
sigma2 <- mean(s)
return(list(beta = beta, sigma2 = sigma2))
}
#-----------------------------------------------------------------------
# Parameters
#
# n: number of observations
# p: number of covariates
# Y: response vector (n x 1)
# X: matrix of predictors (n x p)
# beta: true coefficient vector (p x 1)
# q: number of non-zero beta
# sd.true: true error variance
# tau: hyper-parameter for prior on beta
#-----------------------------------------------------------------------
n <- 100
p <- 90
q <- 90
tau <- 10
sd.true <- sqrt(3)
beta_vals <- c(-2.5, -2, -1.5, 1.5, 2, 2.5)
index <- sample(1:p, q)
beta <- rep(0, p)
beta[index] <- beta_vals
# store values
nrep <- 100
sigmas <- matrix(NA, nrow = nrep, ncol = 4)
betas <- array(NA, dim = c(nrep, p, 4))
i <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
Y <- X%*%beta + rnorm(n, sd = sd.true)
Y <- as.vector(Y)
tXX <- crossprod(X)
tXY <- crossprod(X, Y)
# LS
ls <- summary(lm(Y ~ X - 1))
rmse <- ls$sigma
ls_b <- ls$coefficients[,1]
# Conjugate
V_conj <- chol2inv(chol(tXX + diag(p) / tau^2))
beta_conj <- V_conj %*% tXY
H_conj <-  X %*% V_conj %*% t(X)
sigma2_conj <- (t(Y) %*% (diag(n) - H_conj) %*% Y)/(n - 2)
# Conjugate with Zellner's prior
V_zell <- tau^2/(1 + tau^2) * chol2inv(chol(tXX))
beta_zell <- V_zell %*% tXY
H_zell <- X %*% V_zell %*% t(X)
sigma2_zell <- (t(Y) %*% (diag(n) - H_zell) %*% Y)/(n - 2)
# Independent prior
ind_out <- gibbs_rr(iter = 1000, burn = 500, Y, X, tXY, tXX, tau)
beta_ind <- ind_out$beta
sigma2_ind <- ind_out$sigma2
hist(sigma2_conj * V_conj)
hist(abs(sigma2_conj) * V_conj)
hist(as.vector(sigma2_conj) * V_conj)
hist(diag(as.vector(sigma2_conj) * V_conj))
summary(ls)
ls
ls$coefficients
hist(ls$coefficients[,2])
hist(ls$coefficients[,2], xlim = c(0, 1))
hist(diag(as.vector(sigma2_conj) * V_conj))
hist(ls$coefficients[,2], xlim = c(0, 1))
hist(diag(as.vector(sigma2_conj) * V_conj), add = T, col = "blue")
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/sim_study_1")
library(fabia)
fabia
extractBic
SSLB
library(SSLB)
SSLB
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/github/sim_study_2")
library(reshape2)
library(tidyverse)
load( "results/sigma_1.RData")
result_melt <- melt(result)
result_tibble <- as_tibble(result_melt)
dat <- spread(result_tibble, Var2, value)
# consensus
dat <- filter(dat, !(Var1 %in% c("FABIA_truth","Bicmix_truth", "FABIAS", "FABIAS_truth", "CCS")))
labels <- unique(dat$Var1)
labels <- as.character(labels)
labels[which(labels == "SSLB_PY")] <- "SSLB-PY"
labels[which(labels == "SSLB_IBP")] <- "SSLB-IBP"
labels[which(labels == "SSLB_BB")] <- "SSLB-BB"
labels[which(labels == "Bicmix")] <- "BicMix"
g <- ggplot(dat, aes(Var1, consensus))
g <- g + geom_boxplot(aes(fill = Var1))
g <- g + scale_y_continuous(limits = c(0, 1))
g <- g + labs(x = "", y = "Consensus")
g <- g + scale_x_discrete(labels = labels)
g <- g + theme(axis.text.x=element_text(color = "black", size=15, angle=0))
g <- g + theme(legend.position="none")
g <- g + theme(axis.ticks = element_blank())
g <- g + theme(text = element_text(size=20))
g
# Requires these functions
source("../SSLB_functions.R")
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/github/breastCancerNKI")
# R script to analyze fabia data
load("data/gene_info.RData")
load("data/sample_info.RData")
load("fabia_result/fabia_out_50.RData")
X_FABIA <- t(out_FABIA@Z)
B_FABIA <- out_FABIA@L
FABIA_biclusters <- extractBic(out_FABIA)
B_FABIA_support <- matrix(0, nrow = G, ncol = K_FABIA)
X_FABIA_support <- matrix(0, nrow = N, ncol = K_FABIA)
for(k in 1:K_FABIA) {
B_FABIA_support[FABIA_biclusters$numn[k,]$numng, k] <- 1
X_FABIA_support[FABIA_biclusters$numn[k,]$numnp, k] <- 1
}
X_FABIA[X_FABIA_support == 0] <- 0
B_FABIA[B_FABIA_support == 0] <- 0
zeroes_B <- which(apply(B_FABIA, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIA, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIA <- as.matrix(X_FABIA[, -zeroes])
B_FABIA <- as.matrix(B_FABIA[, -zeroes])
}
N <- nrow(X_FABIA)
G <- nrow(B_FABIA)
gene_info[] <- lapply(gene_info, as.character)
er <- sample_info$er
er[er == 0] <- -1
er_order <- order(er)
er_factor <- factor(er)
K_FABIA <- 50
p_vals_fabia <- numeric(K_FABIA)
for (k in 1:K_FABIA) {
p_vals_fabia[k] <- wilcox.test(X_FABIA[, k] ~ er_factor)$p.value
}
er_cols <- which(p_vals_fabia < 0.01/K_FABIA)
er_cols <- er_cols[order(p_vals_fabia[er_cols], decreasing = F)]
er_plot <- plot_matrix(er[er_order], title = "ER") +
theme(text = element_text(size= 12))
X_FABIA[X_FABIA > 5] <- 5
X_FABIA[X_FABIA < -5] <- -5
fabia_plot_50 <- plot_matrix(X_FABIA[er_order, union(er_cols, 1:K_FABIA)],
title = "FABIA Factor Matrix (K = 50)") +
theme(text = element_text(size= 12))
#-------------------------------------------------------------------------
load("fabia_result/fabia_out_10.RData")
K_FABIA <- 10
X_FABIA <- t(out_FABIA@Z)
B_FABIA <- out_FABIA@L
FABIA_biclusters <- extractBic(out_FABIA)
B_FABIA_support <- matrix(0, nrow = G, ncol = K_FABIA)
X_FABIA_support <- matrix(0, nrow = N, ncol = K_FABIA)
for(k in 1:K_FABIA) {
B_FABIA_support[FABIA_biclusters$numn[k,]$numng, k] <- 1
X_FABIA_support[FABIA_biclusters$numn[k,]$numnp, k] <- 1
}
X_FABIA[X_FABIA_support == 0] <- 0
B_FABIA[B_FABIA_support == 0] <- 0
zeroes_B <- which(apply(B_FABIA, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIA, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIA <- as.matrix(X_FABIA[, -zeroes])
B_FABIA <- as.matrix(B_FABIA[, -zeroes])
}
p_vals_fabia <- numeric(K_FABIA)
for (k in 1:K_FABIA) {
p_vals_fabia[k] <- wilcox.test(X_FABIA[, k] ~ er_factor)$p.value
}
er_plot <- plot_matrix(er[er_order], title = "ER") +
theme(text = element_text(size= 12))
er_cols <- which(p_vals_fabia < 0.01/K_FABIA)
er_cols <- er_cols[order(p_vals_fabia[er_cols], decreasing = F)]
X_FABIA[X_FABIA > 5] <- 5
X_FABIA[X_FABIA < -5] <- -5
fabia_plot_10 <- plot_matrix(X_FABIA[er_order, union(c(er_cols), 1:K_FABIA)],
title = "FABIA Factor Matrix (K = 10)") +
theme(text = element_text(size= 12))
source('../SSLB_functions.R', echo=TRUE)
library(SSLB)
library(fabia)
bicmix_dir <- "../../Code/BicMix/BicMix"
Y <- read.table("data/Y_raw.txt", stringsAsFactors = F)
Y <- as.matrix(Y)
N <- nrow(Y)
G <- ncol(Y)
K_init <- 50
K_FABIA <- 10
time <- system.time(out_FABIA_10 <- fabia(t(Y), K_FABIA))
X_FABIA <- t(out_FABIA@Z)
B_FABIA <- out_FABIA@L
FABIA_biclusters <- extractBic(out_FABIA)
B_FABIA_support <- matrix(0, nrow = G, ncol = K_FABIA)
X_FABIA_support <- matrix(0, nrow = N, ncol = K_FABIA)
for(k in 1:K_FABIA) {
B_FABIA_support[FABIA_biclusters$numn[k,]$numng, k] <- 1
X_FABIA_support[FABIA_biclusters$numn[k,]$numnp, k] <- 1
}
X_FABIA[X_FABIA_support == 0] <- 0
B_FABIA[B_FABIA_support == 0] <- 0
zeroes_B <- which(apply(B_FABIA, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIA, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIA <- as.matrix(X_FABIA[, -zeroes])
B_FABIA <- as.matrix(B_FABIA[, -zeroes])
}
save(out_FABIA_10, file = "fabia_result/fabia_out_10.RData")
load("fabia_result/fabia_out_50.RData")
X_FABIA <- t(out_FABIA@Z)
B_FABIA <- out_FABIA@L
FABIA_biclusters <- extractBic(out_FABIA)
B_FABIA_support <- matrix(0, nrow = G, ncol = K_FABIA)
X_FABIA_support <- matrix(0, nrow = N, ncol = K_FABIA)
for(k in 1:K_FABIA) {
B_FABIA_support[FABIA_biclusters$numn[k,]$numng, k] <- 1
X_FABIA_support[FABIA_biclusters$numn[k,]$numnp, k] <- 1
}
X_FABIA[X_FABIA_support == 0] <- 0
B_FABIA[B_FABIA_support == 0] <- 0
zeroes_B <- which(apply(B_FABIA, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIA, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIA <- as.matrix(X_FABIA[, -zeroes])
B_FABIA <- as.matrix(B_FABIA[, -zeroes])
}
N <- nrow(X_FABIA)
G <- nrow(B_FABIA)
gene_info[] <- lapply(gene_info, as.character)
er <- sample_info$er
er[er == 0] <- -1
er_order <- order(er)
er_factor <- factor(er)
K_FABIA <- 50
p_vals_fabia <- numeric(K_FABIA)
for (k in 1:K_FABIA) {
p_vals_fabia[k] <- wilcox.test(X_FABIA[, k] ~ er_factor)$p.value
}
er_cols <- which(p_vals_fabia < 0.01/K_FABIA)
er_cols <- er_cols[order(p_vals_fabia[er_cols], decreasing = F)]
er_plot <- plot_matrix(er[er_order], title = "ER") +
theme(text = element_text(size= 12))
X_FABIA[X_FABIA > 5] <- 5
X_FABIA[X_FABIA < -5] <- -5
fabia_plot_50 <- plot_matrix(X_FABIA[er_order, union(er_cols, 1:K_FABIA)],
title = "FABIA Factor Matrix (K = 50)") +
theme(text = element_text(size= 12))
er+cp;s
er_cols
load("fabia_result/fabia_out_10.RData")
K_FABIA <- 10
X_FABIA <- t(out_FABIA@Z)
B_FABIA <- out_FABIA@L
FABIA_biclusters <- extractBic(out_FABIA)
B_FABIA_support <- matrix(0, nrow = G, ncol = K_FABIA)
X_FABIA_support <- matrix(0, nrow = N, ncol = K_FABIA)
for(k in 1:K_FABIA) {
B_FABIA_support[FABIA_biclusters$numn[k,]$numng, k] <- 1
X_FABIA_support[FABIA_biclusters$numn[k,]$numnp, k] <- 1
}
X_FABIA[X_FABIA_support == 0] <- 0
B_FABIA[B_FABIA_support == 0] <- 0
zeroes_B <- which(apply(B_FABIA, 2, function(x) all(x == 0)))
zeroes_X <- which(apply(X_FABIA, 2, function(x) all(x == 0)))
zeroes <- union(zeroes_B, zeroes_X)
if (length(zeroes) > 0) {
X_FABIA <- as.matrix(X_FABIA[, -zeroes])
B_FABIA <- as.matrix(B_FABIA[, -zeroes])
}
p_vals_fabia <- numeric(K_FABIA)
for (k in 1:K_FABIA) {
p_vals_fabia[k] <- wilcox.test(X_FABIA[, k] ~ er_factor)$p.value
}
er_plot <- plot_matrix(er[er_order], title = "ER") +
theme(text = element_text(size= 12))
er_cols <- which(p_vals_fabia < 0.01/K_FABIA)
er_cols <- er_cols[order(p_vals_fabia[er_cols], decreasing = F)]
X_FABIA[X_FABIA > 5] <- 5
X_FABIA[X_FABIA < -5] <- -5
fabia_plot_10 <- plot_matrix(X_FABIA[er_order, union(c(er_cols), 1:K_FABIA)],
title = "FABIA Factor Matrix (K = 10)") +
theme(text = element_text(size= 12))
grid.arrange(er_plot, fabia_plot_10, fabia_plot_50, nrow = 1, widths = c(1.5,11,  20))
er_cols
fabia_plot_10
p_vals_fabia
er
er_cols
plot_matrix(X_FABIA[er_order, c(1, 2)],
title = "FABIA Factor Matrix (K = 10)")
setwd("~/")
setwd("~/Dropbox/~PhD/~Research/Biclustering/Examples/github/breastCancerNKI")
source('../SSLB_functions.R', echo=TRUE)
load("SSLB_result/SSLB_out.RData")
load("data/gene_info.RData")
load("data/sample_info.RData")
Y <- read.table("data/Y_raw.txt", stringsAsFactors = F)
Y <- as.matrix(Y)
N <- nrow(Y)
G <- ncol(Y)
gene_info[] <- lapply(gene_info, as.character)
er <- sample_info$er
er[er == 0] <- -1
er_order <- order(er)
er_factor <- factor(er)
X_SSLB <- out$X
K_SSLB <- out$K
B_SSLB <- out$B
# which biclusters contain ESR1
B_SSLB[which(gene_info$HUGO.gene.symbol == "ESR1"), ]
# HER2 markers
B_SSLB[which(gene_info$HUGO.gene.symbol == "ERBB2"), ]
# sign change to make ERRB2 positive in B for consistent colors
X_SSLB[, 2] <- -X_SSLB[, 2]
B_SSLB[, 2] <- -B_SSLB[, 2]
# order biclusters (columns)
X_SSLB <- X_SSLB[, union(c(3, 2), 1:K_SSLB)]
B_SSLB <- B_SSLB[, union(c(3, 2), 1:K_SSLB)]
# significant difference
p_vals <- numeric(K_SSLB)
for (k in 1:K_SSLB) {
p_vals[k] <- wilcox.test(X_SSLB[, k] ~ er_factor)$p.value
}
er_k <- which.min(p_vals)
er_k < 0.01/K_SSLB
er_k
p_vals < 0.01/K_SSLB
p_vals
# Further markers (ZMZ14)
# luminal A (ER+, HER2-)
markers <- c("KRT8", "FOXA1", "XBP1", "GATA3", "ADH1B")
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
in_bic <- B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), 1]
found <- sum(in_bic != 0)
tot <- length(markers)
n_bic <- sum(B_SSLB[,1] != 0)
mat <- matrix(c(found, tot - found, n_bic - found, G - tot - (n_bic - found)), 2, 2)
fisher.test(mat)
# luminal B (ER+, HER2+)
markers <- c("KRT8", "FGFR1", "EGFR", "CCNE1","CCNB1", "MYBL2")
in_bic <- B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), 1]
found <- sum(in_bic != 0)
tot <- length(markers)
n_bic <- sum(B_SSLB[,1] != 0)
mat <- matrix(c(found, tot - found, n_bic - found, G - tot - (n_bic - found)), 2, 2)
fisher.test(mat)
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
# luminal B (ER+, HER2+)
markers <- c("KRT8", "FGFR1", "EGFR", "CCNE1","CCNB1", "MYBL2")
in_bic <- B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), 2]
found <- sum(in_bic != 0)
tot <- length(markers)
n_bic <- sum(B_SSLB[,1] != 0)
mat <- matrix(c(found, tot - found, n_bic - found, G - tot - (n_bic - found)), 2, 2)
fisher.test(mat)
# basal-like
markers <- c("KRT5", "KRT14", "KRT17", "EGFR", "KIT", "FOXC1", "CDH3", "VIM")
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
# luminal B (ER+, HER2+)
markers <- c("KRT8", "FGFR1", "EGFR", "CCNE1","CCNB1", "MYBL2")
in_bic <- B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), 2]
found <- sum(in_bic != 0)
tot <- length(markers)
n_bic <- sum(B_SSLB[,2] != 0)
mat <- matrix(c(found, tot - found, n_bic - found, G - tot - (n_bic - found)), 2, 2)
fisher.test(mat)
# ER-/HER2+
markers <- c("GRB7")
B_SSLB[which(gene_info$HUGO.gene.symbol == "GRB7"), ]
plot_matrix(X_SSLB[er_order,])
# PLOTS -----------------------------------------------------
# order patients within ER status
g1 <- which((X_SSLB[, 1] < 0 & er == -1) & X_SSLB[, 2] <= 0)
ord1 <- order(X_SSLB[g1, 1], decreasing = F)
ord1 <- g1[ord1]
g2 <- which((X_SSLB[, 1] < 0 & er == -1) & X_SSLB[, 2] > 0)
ord2 <- order(X_SSLB[g2, 1], decreasing = F)
ord2 <- g2[ord2]
g3 <- which((X_SSLB[, 1] == 0 & er == -1))
ord3 <- order(X_SSLB[g3, 2], decreasing = T)
ord3 <- g3[ord3]
g4 <- which(X_SSLB[, 1] < 0 & er == 1)
ord4 <- order(X_SSLB[g4, 2], decreasing = F)
ord4 <- g4[ord4]
g5 <- which(X_SSLB[, 1] >= 0 & er == 1)
ord5 <- order(X_SSLB[g5, 2], decreasing = T)
ord5 <- g5[ord5]
ord <- c(ord1, ord2, ord3, ord4, ord5)
# cap for viualization
X_SSLB[X_SSLB > 5] <- 5
X_SSLB[X_SSLB < -5] <- -5
# plot with first 10 biclusters
SSLB_plot <- plot_matrix(X_SSLB[ord, 1:10]/max(abs(X_SSLB)) * rescale,
title = "SSLB Factor Matrix", legend = T) +
theme(text = element_text(size= 12)) + theme(legend.position = "left")
# set abs(Y) > rescale -> Y = rescale for plot
rescale <- 0.25
# plot with first 10 biclusters
SSLB_plot <- plot_matrix(X_SSLB[ord, 1:10]/max(abs(X_SSLB)) * rescale,
title = "SSLB Factor Matrix", legend = T) +
theme(text = element_text(size= 12)) + theme(legend.position = "left")
SSLB_plot
# which biclusters contain ESR1
B_SSLB[which(gene_info$HUGO.gene.symbol == "ESR1"), ]
# HER2 markers
B_SSLB[which(gene_info$HUGO.gene.symbol == "ERBB2"), ]
# basal-like
markers <- c("KRT5", "KRT14", "KRT17", "EGFR", "KIT", "FOXC1", "CDH3", "VIM")
B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), ]
in_bic <- B_SSLB[which(gene_info$HUGO.gene.symbol %in% markers), 2]
found <- sum(in_bic != 0)
tot <- length(markers)
n_bic <- sum(B_SSLB[,2] != 0)
mat <- matrix(c(found, tot - found, n_bic - found, G - tot - (n_bic - found)), 2, 2)
fisher.test(mat)
n_bic
tot
G
